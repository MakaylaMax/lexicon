{"ast":null,"code":"var _jsxFileName = \"/Users/makaylamaxwell/Documents/dev/Final/my-final-project/src/pages/GetWordContainer.js\";\nimport React, { Component } from 'react';\nimport Search from '../components/Search';\nimport MerriamAPI from '../services/MerriamAPI';\nimport '../App.css'; //trying this below\n\nimport Fave from '../components/Fave'; // import WordRow from '../components/WordRow';\n\nclass GetWordContainer extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      word: this.props.word,\n      info: this.props.info,\n      partOfSpeech: this.props.parOfSpeech,\n      versions: this.props.versions,\n      shortdef: this.props.shortdef,\n      pronunciation: this.props.pronunciation,\n      faves: this.props.faves,\n      error: ''\n    };\n  }\n\n  async componentDidMount() {\n    const word = this.props.match.params.word;\n\n    try {\n      const data = await MerriamAPI.getWordInfo(word);\n\n      if (data.length && data[0].fl && data[0].meta.stems && data[0].hwi.prs[0].mw && data[0].shortdef[0]) {\n        this.setState({\n          word: word,\n          info: data,\n          versions: data[0].meta.stems,\n          shortdef: data[0].shortdef[0],\n          partOfSpeech: data[0].fl,\n          pronunciation: data[0].hwi.prs[0].mw,\n          error: ''\n        });\n      } else {\n        console.log(\"Error\");\n        this.setState({\n          error: 'Word Not Found'\n        });\n      }\n    } catch {\n      this.props.setModal('Offline');\n    } // console.log(`info state: ${this.state.info}`);\n    // console.log(`words state: ${this.state.words}`);\n\n  }\n\n  async componentDidUpdate() {\n    const word = this.props.match.params.word;\n\n    if (word !== this.state.word) {\n      try {\n        const data = await MerriamAPI.getWordInfo(word);\n\n        if (data.length && data[0].fl && data[0].meta.stems && data[0].hwi.prs[0].mw && data[0].shortdef[0]) {\n          this.setState({\n            word: word,\n            info: data,\n            versions: data[0].meta.stems,\n            shortdef: data[0].shortdef[0],\n            partOfSpeech: data[0].fl,\n            pronunciation: data[0].hwi.prs[0].mw,\n            error: ''\n          });\n        } else {\n          // there a lot errors because I didn't make a deep copy somewhere\n          // console.log(\"Error\")\n          this.setState({\n            error: 'Word Not Found'\n          });\n        }\n      } catch {\n        this.props.setModal('Offline');\n      }\n    }\n  } // handleSubmit = (e) => {\n  //   e.preventDefault(); \n  //   console.log('clicked');\n  //   console.log(this.state.word)\n  //   this.props.handleSave({\n  //     word: this.state.word,\n  //     info: this.state.info,\n  //     versions: this.state.versions,\n  //     shortdef: this.state.shortdef,\n  //     partOfSpeech: this.state.partOfSpeech,\n  //     pronunciation: this.state.pronunciation, \n  // });\n  // }\n\n\n  render() {\n    // const word = {\n    //   word: this.state.word,\n    //   info: this.state.info,\n    //   versions: this.state.versions,\n    //   shortdef: this.state.shortdef,\n    //   partOfSpeech: this.state.partOfSpeech,\n    //   pronunciation: this.state.pronunciation, \n    // }\n    const deleteWord = this.props.faves.map(word => /*#__PURE__*/React.createElement(Fave, {\n      key: word.word,\n      word: this.state.word,\n      handleSave: () => this.props.handleSave(word),\n      isFave: this.props.faves.some(fave => fave.word === this.state.word),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 3\n      }\n    }));\n    const saveWord = this.Component = /*#__PURE__*/React.createElement(Fave, {\n      handleSave: () => this.props.handleSave({\n        word: this.state.word,\n        info: this.state.info,\n        versions: this.state.versions,\n        shortdef: this.state.shortdef,\n        partOfSpeech: this.state.partOfSpeech,\n        pronunciation: this.state.pronunciation\n      }),\n      isFave: this.props.faves.some(fave => fave.word === this.state.word),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 3\n      }\n    });\n    const test = this.props.faves.some(fave => fave.word === this.state.word) ? deleteWord : saveWord; // const test2 = this.state.faves\n    // test2.map((currElement, index) => {\n    //   console.log(\"The current iteration is: \" + index);\n    //   console.log(\"the current element is: \" + currElement.word);\n    //   console.log(\"the current word is: \" + test2.indexOf(this.state.faves.word));\n    //   return currElement;\n    // });\n\n    const test2 = this.state.faves;\n    const peace = test2 >= 0 ? console.log(\"Index position: \" + test2.indexOf(this.state.word)) : console.log(\"FALSE\");\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"searchWordPage\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Search, {\n      handleUpdate: this.props.handleUpdate,\n      setRedirect: this.props.setRedirect,\n      setModal: this.props.setModal,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }\n    }), this.state.error), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      className: \"display-6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }\n    }, \"Definition\"), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 14\n      }\n    }, \"word:\"), \" \", this.state.word), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 15\n      }\n    }, \"part of speech:\"), \" \", this.state.partOfSpeech), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 14\n      }\n    }, \"versions:\"), \"  \", this.state.versions.map((v, i) => /*#__PURE__*/React.createElement(\"div\", {\n      key: i,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 67\n      }\n    }, v))), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 13\n      }\n    }, \"pronunciation:\"), \" \", this.state.pronunciation), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 13\n      }\n    }, \"definition:\"), \"  \", this.state.shortdef), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 9\n      }\n    }), test, peace));\n  }\n\n}\n\nexport default GetWordContainer;","map":{"version":3,"sources":["/Users/makaylamaxwell/Documents/dev/Final/my-final-project/src/pages/GetWordContainer.js"],"names":["React","Component","Search","MerriamAPI","Fave","GetWordContainer","state","word","props","info","partOfSpeech","parOfSpeech","versions","shortdef","pronunciation","faves","error","componentDidMount","match","params","data","getWordInfo","length","fl","meta","stems","hwi","prs","mw","setState","console","log","setModal","componentDidUpdate","render","deleteWord","map","handleSave","some","fave","saveWord","test","test2","peace","indexOf","handleUpdate","setRedirect","v","i"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport Search from '../components/Search';\nimport MerriamAPI from '../services/MerriamAPI';\nimport '../App.css';\n//trying this below\nimport Fave from '../components/Fave';\n// import WordRow from '../components/WordRow';\n\n\nclass GetWordContainer extends Component {\n\nstate = {\n  word: this.props.word,\n  info: this.props.info,\n  partOfSpeech: this.props.parOfSpeech,\n  versions: this.props.versions,\n  shortdef: this.props.shortdef,\n  pronunciation: this.props.pronunciation,\n  faves: this.props.faves, \n  error: '',\n}\n\n\nasync componentDidMount() {\n  const word = this.props.match.params.word;\n  try{\n    const data = await MerriamAPI.getWordInfo(word);\n    if (data.length && data[0].fl && data[0].meta.stems && data[0].hwi.prs[0].mw && data[0].shortdef[0]) {\n      this.setState({\n        word: word,\n        info: data,\n        versions: data[0].meta.stems,\n        shortdef: data[0].shortdef[0],\n        partOfSpeech: data[0].fl,\n        pronunciation: data[0].hwi.prs[0].mw, \n        error: '',\n       })\n      }\n    else {\n      console.log(\"Error\")\n      this.setState({error:'Word Not Found'})\n    }\n  }\n  catch {\n    this.props.setModal('Offline');\n  }\n  // console.log(`info state: ${this.state.info}`);\n  // console.log(`words state: ${this.state.words}`);\n}\n\n\nasync componentDidUpdate() {\n  const word = this.props.match.params.word;\n  if (word !== this.state.word){\n    try{\n      const data = await MerriamAPI.getWordInfo(word);\n      if (data.length && data[0].fl && data[0].meta.stems && data[0].hwi.prs[0].mw && data[0].shortdef[0]) {\n        this.setState({\n          word: word,\n          info: data,\n          versions: data[0].meta.stems,\n          shortdef: data[0].shortdef[0],\n          partOfSpeech: data[0].fl,\n          pronunciation: data[0].hwi.prs[0].mw, \n          error: '',\n         })\n        }\n      else {\n        // there a lot errors because I didn't make a deep copy somewhere\n        // console.log(\"Error\")\n        this.setState({error: 'Word Not Found'})\n      }\n    }\n    catch {\n      this.props.setModal('Offline');\n    }\n    }\n  }\n\n\n// handleSubmit = (e) => {\n//   e.preventDefault(); \n//   console.log('clicked');\n//   console.log(this.state.word)\n//   this.props.handleSave({\n//     word: this.state.word,\n//     info: this.state.info,\n//     versions: this.state.versions,\n//     shortdef: this.state.shortdef,\n//     partOfSpeech: this.state.partOfSpeech,\n//     pronunciation: this.state.pronunciation, \n// });\n// }\n\n\n\nrender (){\n  \n\n  // const word = {\n  //   word: this.state.word,\n  //   info: this.state.info,\n  //   versions: this.state.versions,\n  //   shortdef: this.state.shortdef,\n  //   partOfSpeech: this.state.partOfSpeech,\n  //   pronunciation: this.state.pronunciation, \n  // }\n  \n  \nconst deleteWord = this.props.faves.map(word =>\n  <Fave\n  key={word.word}\n  word={this.state.word}\n  handleSave={() => this.props.handleSave(word)}\n  isFave={(this.props.faves.some(fave => fave.word === this.state.word))} \n  />\n);\n\n\nconst saveWord = this.Component = (\n  <Fave \n  handleSave={() => this.props.handleSave({\n    word: this.state.word,\n    info: this.state.info,\n    versions: this.state.versions,\n    shortdef: this.state.shortdef,\n    partOfSpeech: this.state.partOfSpeech,\n    pronunciation: this.state.pronunciation, \n  })}\n  isFave={(this.props.faves.some(fave => fave.word === this.state.word))}\n  />\n  );\n\n \nconst test = (this.props.faves.some(fave => fave.word === this.state.word)) ? deleteWord : saveWord;\n\n// const test2 = this.state.faves\n// test2.map((currElement, index) => {\n//   console.log(\"The current iteration is: \" + index);\n//   console.log(\"the current element is: \" + currElement.word);\n//   console.log(\"the current word is: \" + test2.indexOf(this.state.faves.word));\n//   return currElement;\n// });\n\nconst test2 = this.state.faves\nconst peace = test2 >= 0 ? console.log(\"Index position: \" + test2.indexOf(this.state.word)): console.log(\"FALSE\");\n\n\n\n  return (\n\n      <div >\n        <div className=\"searchWordPage\">\n        <Search\n          handleUpdate={this.props.handleUpdate}\n          setRedirect={this.props.setRedirect}\n          setModal={this.props.setModal}\n        />\n        {this.state.error}\n        </div>\n        <div className=\"App\">\n        <h1 className=\"display-6\">\n          Definition\n        </h1>\n        <div>\n             <b>word:</b> {this.state.word}\n        </div>\n        <div>\n              <b>part of speech:</b> {this.state.partOfSpeech}\n        </div>\n        <div>\n             <b>versions:</b>  {this.state.versions.map((v, i) => <div key={i}>{v}</div>)}\n        </div>\n        <div>\n            <b>pronunciation:</b> {this.state.pronunciation}\n        </div>\n        <div>\n            <b>definition:</b>  {this.state.shortdef}\n        </div>\n        <br/>\n        {/* <button onClick={this.handleSubmit} type=\"submit\">Save</button> */}\n\n        {test}\n        {peace}\n\n        {/* {saveWord} */}\n \n\n        {/* {allWords} */}\n\n        {/* <Fave \n            handleSave={() => this.props.handleSave({\n              word: this.state.word,\n              info: this.state.info,\n              versions: this.state.versions,\n              shortdef: this.state.shortdef,\n              partOfSpeech: this.state.partOfSpeech,\n              pronunciation: this.state.pronunciation, \n            })}\n            isFave={(this.props.faves.some(fave => fave.word === this.props.word))}\n        /> */}\n       {/* <Fave \n            handleSave={() => this.props.handleSave(word)}\n            isFave={(this.props.faves.some(fave => fave.word === this.props.word))}\n        /> */}\n        </div>\n      </div>\n  );\n  }\n}\n\n export default GetWordContainer;\n  \n\n"]},"metadata":{},"sourceType":"module"}