{"ast":null,"code":"var _jsxFileName = \"/Users/makaylamaxwell/Documents/dev/Final/my-final-project/src/components/Search.js\";\nimport React, { Component } from 'react';\n\nclass Search extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = event => {\n      this.setState({\n        word: event.target.value.toLowerCase()\n      });\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      this.props.search(this.state.word);\n    };\n\n    this.state = {\n      word: '',\n      error: ''\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 11\n      }\n    }, \"Search\")));\n  }\n\n}\n\nsearch = async word => {\n  try {\n    const data = await MerriamAPI.getWordInfo(word);\n\n    if (data) {\n      this.props.handleUpdate({\n        word: word,\n        info: data,\n        versions: data[0].meta.stems,\n        shortdef: data[0].shortdef[0],\n        partOfSpeech: data[0].fl,\n        pronunciation: data[0].hwi.prs[0].mw\n      });\n      this.props.setRedirect({\n        path: `/definition/${word}`\n      });\n    } else {\n      console.log('No Definition Found');\n    }\n  } catch {\n    this.setState({\n      error: 'No Definition Found'\n    });\n  }\n}; //SECOND ATTEMPT\n// class Search extends Component {\n//   constructor(props){\n//     super(props);\n//       this.state = {\n//         word:'',\n//       };\n//       this.handleChange = this.handleChange.bind(this);\n//       this.handleSubmit = this.handleSubmit.bind(this);\n//   }\n//   handleChange = (event) => {\n//     this.setState({word:event.target.value.toLowerCase()})\n//   }\n//   handleSubmit = (e) => {\n//       e.preventDefault();\n//       this.props.search(this.state.word);\n//     }\n//   render (){\n//       return (\n//         <form onSubmit={this.handleSubmit}>\n//         <div>\n//           <input type=\"text\" onChange={this.handleChange} />\n//           <button type=\"submit\">Search</button>\n//         </div>\n//         </form>\n//       );\n//     }\n//   }\n//FIRST ATTEMPT \n//   state = {\n//     error: '',\n// }\n// search = async (word) => {\n//     try{\n//         const data = await MerriamAPI.getWordInfo(word);\n//         if (data){\n//             this.props.handleUpdate({\n//                 word: word,\n//                 info: data,\n//                 versions: data[0].meta.stems,\n//                 shortdef: data[0].shortdef[0],\n//                 partOfSpeech: data[0].fl,\n//                 pronunciation: data[0].hwi.prs[0].mw, \n//             });\n//         // () => {\n//             this.props.setRedirect({\n//                 path: `/definition/${word}`,\n//                 // path: `/definition/${word}`,  \n//             });\n//             // }\n//         }\n//         else{\n//             console.log('No Definition Found')\n//         }\n//     }\n//     catch{\n//         this.setState({error: 'No Definition Found'})\n//     }\n//     // console.log(this.props.setRedirect())\n// } \n\n\nexport default Search;","map":{"version":3,"sources":["/Users/makaylamaxwell/Documents/dev/Final/my-final-project/src/components/Search.js"],"names":["React","Component","Search","constructor","props","handleChange","event","setState","word","target","value","toLowerCase","handleSubmit","e","preventDefault","search","state","error","bind","render","data","MerriamAPI","getWordInfo","handleUpdate","info","versions","meta","stems","shortdef","partOfSpeech","fl","pronunciation","hwi","prs","mw","setRedirect","path","console","log"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\n\n\nclass Search extends Component {\n  constructor(props){\n    super(props);\n      this.state = {\n        word:'',\n        error: '',\n      };\n      this.handleChange = this.handleChange.bind(this);\n      this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange = (event) => {\n    this.setState({word:event.target.value.toLowerCase()})\n  }\n  \n  \n  handleSubmit = (e) => {\n      e.preventDefault();\n      this.props.search(this.state.word);\n    }\n  \n  \n  render (){\n      return (\n        <form onSubmit={this.handleSubmit}>\n        <div>\n          <input type=\"text\" onChange={this.handleChange} />\n          <button type=\"submit\">Search</button>\n        </div>\n        </form>\n      );\n    }\n  }\n\n  search = async (word) => {\n\n    try{\n        const data = await MerriamAPI.getWordInfo(word);\n        \n        if (data){\n            this.props.handleUpdate({\n                word: word,\n                info: data,\n                versions: data[0].meta.stems,\n                shortdef: data[0].shortdef[0],\n                partOfSpeech: data[0].fl,\n                pronunciation: data[0].hwi.prs[0].mw, \n            });\n            this.props.setRedirect({\n                path: `/definition/${word}`,\n            });\n        }\n        else{\n            console.log('No Definition Found')\n        }\n    }\n    catch{\n        this.setState({error: 'No Definition Found'})\n    }\n}\n\n\n\n\n\n\n//SECOND ATTEMPT\n// class Search extends Component {\n//   constructor(props){\n//     super(props);\n//       this.state = {\n//         word:'',\n//       };\n//       this.handleChange = this.handleChange.bind(this);\n//       this.handleSubmit = this.handleSubmit.bind(this);\n//   }\n\n//   handleChange = (event) => {\n//     this.setState({word:event.target.value.toLowerCase()})\n//   }\n  \n  \n//   handleSubmit = (e) => {\n//       e.preventDefault();\n//       this.props.search(this.state.word);\n//     }\n  \n  \n//   render (){\n//       return (\n//         <form onSubmit={this.handleSubmit}>\n//         <div>\n//           <input type=\"text\" onChange={this.handleChange} />\n//           <button type=\"submit\">Search</button>\n//         </div>\n//         </form>\n//       );\n//     }\n//   }\n \n\n//FIRST ATTEMPT \n\n//   state = {\n//     error: '',\n// }\n\n\n// search = async (word) => {\n\n//     try{\n//         const data = await MerriamAPI.getWordInfo(word);\n        \n//         if (data){\n//             this.props.handleUpdate({\n//                 word: word,\n//                 info: data,\n//                 versions: data[0].meta.stems,\n//                 shortdef: data[0].shortdef[0],\n//                 partOfSpeech: data[0].fl,\n//                 pronunciation: data[0].hwi.prs[0].mw, \n//             });\n//         // () => {\n//             this.props.setRedirect({\n//                 path: `/definition/${word}`,\n//                 // path: `/definition/${word}`,  \n//             });\n//             // }\n//         }\n//         else{\n//             console.log('No Definition Found')\n//         }\n//     }\n//     catch{\n//         this.setState({error: 'No Definition Found'})\n//     }\n//     // console.log(this.props.setRedirect())\n// } \n\n\nexport default Search;\n"]},"metadata":{},"sourceType":"module"}