{"ast":null,"code":"var _jsxFileName = \"/Users/makaylamaxwell/Documents/dev/Final/my-final-project/src/pages/Home.js\";\nimport React, { Component } from 'react';\nimport Search from '../components/Search';\nimport { Switch, Route, Link, Redirect } from 'react-router-dom';\nimport MerriamAPI from '../services/MerriamAPI';\n\nclass Home extends Component {\n  constructor() {\n    super();\n\n    this.search = async ({\n      word\n    }) => {\n      try {\n        // var word = this.state.word.trim();\n        const data = await MerriamAPI.getWordInfo(word);\n\n        if (data) {\n          this.props.handleUpdate({\n            word: word,\n            info: data,\n            versions: data[0].meta.stems,\n            shortdef: data[0].shortdef[0],\n            partOfSpeech: data[0].fl,\n            pronunciation: data[0].hwi.prs[0].mw\n          }, () => {\n            this.props.history.push(`/definition/${this.state.word}`);\n          });\n        } else {\n          console.log('No Definition Found');\n        }\n      } catch {\n        this.setState({\n          error: 'No Definition Found'\n        });\n      } // console.log(this.state.info)\n      // console.log(this.state.word)\n\n    };\n\n    this.state = {\n      word: '',\n      error: '',\n      info: [],\n      partOfSpeech: [],\n      versions: [],\n      shortdef: \"\",\n      pronunciation: \"\"\n    };\n    this.search = this.search.bind(this);\n  }\n\n  render() {\n    // if (!this.state.error && this.state.submitted && this.state.info.length > 0) {\n    // return <Redirect to={{ pathname: `/definition/${this.state.word}`, state: { word: this.state.word } }} />\n    // }\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }\n    }, \"My Dictionary\"), /*#__PURE__*/React.createElement(Search, {\n      search: this.search,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }\n    }, this.state.error), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }\n    }, this.state.word), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }\n    }, this.state.partOfSpeech), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }\n    }, this.state.versions.map((v, i) => /*#__PURE__*/React.createElement(\"div\", {\n      key: i,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 49\n      }\n    }, v))), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }\n    }, this.state.pronunciation), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }\n    }, this.state.shortdef));\n  }\n\n} //     constructor(){ \n//         super();\n//           this.state = {\n//             word: '',\n//             error: '',\n//             info: [],\n//             partOfSpeech: [],\n//             versions: [],\n//             shortdef: \"\",\n//             pronunciation: \"\",\n//           };\n//         this.search = this.search.bind(this);\n//       }\n//     search = async ({word}) => {\n//         try{\n//             // var word = this.state.word.trim();\n//             const data = await MerriamAPI.getWordInfo(word);\n//             if (data){\n//                 this.props.handleUpdate({\n//                     word: word,\n//                     info: data,\n//                     versions: data[0].meta.stems,\n//                     shortdef: data[0].shortdef[0],\n//                     partOfSpeech: data[0].fl,\n//                     pronunciation: data[0].hwi.prs[0].mw,\n//                 }, \n//                 () => {\n//                     this.props.history.push(`/definition/${this.state.word}`);\n//                 }\n//                 );\n//             }\n//             else{\n//                 console.log('No Definition Found')\n//             }\n//         }\n//         catch{\n//             this.setState({error: 'No Definition Found'})\n//         }\n//         // console.log(this.state.info)\n//         // console.log(this.state.word)\n//     }\n// render (){\n//     // if (!this.state.error && this.state.submitted && this.state.info.length > 0) {\n//     // return <Redirect to={{ pathname: `/definition/${this.state.word}`, state: { word: this.state.word } }} />\n//     // }\n//     return (\n//         <div>\n//         <h1>My Dictionary</h1>\n//         <Search search={this.search}/>\n//         <div>\n//              {this.state.error}\n//         </div>\n//         <div>\n//              {this.state.word}\n//         </div>\n//         <div>\n//              {this.state.partOfSpeech}\n//         </div>\n//         <div>\n//              {this.state.versions.map((v, i) => <div key={i}>{v}</div>)}\n//         </div>\n//         <div>\n//              {this.state.pronunciation}\n//         </div>\n//         <div>\n//              {this.state.shortdef}\n//         </div>\n//         </div>\n//     );\n//     }\n// }\n\n\nexport default Home;","map":{"version":3,"sources":["/Users/makaylamaxwell/Documents/dev/Final/my-final-project/src/pages/Home.js"],"names":["React","Component","Search","Switch","Route","Link","Redirect","MerriamAPI","Home","constructor","search","word","data","getWordInfo","props","handleUpdate","info","versions","meta","stems","shortdef","partOfSpeech","fl","pronunciation","hwi","prs","mw","history","push","state","console","log","setState","error","bind","render","map","v","i"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport Search from '../components/Search';\nimport {Switch, Route, Link, Redirect} from 'react-router-dom';\nimport MerriamAPI from '../services/MerriamAPI';\n\nclass Home extends Component {   \n\n    constructor(){ \n        super();\n          this.state = {\n            word: '',\n            error: '',\n            info: [],\n            partOfSpeech: [],\n            versions: [],\n            shortdef: \"\",\n            pronunciation: \"\",\n          };\n        this.search = this.search.bind(this);\n      }\n\n\n    search = async ({word}) => {\n        try{\n            // var word = this.state.word.trim();\n            const data = await MerriamAPI.getWordInfo(word);\n            if (data){\n                this.props.handleUpdate({\n                    word: word,\n                    info: data,\n                    versions: data[0].meta.stems,\n                    shortdef: data[0].shortdef[0],\n                    partOfSpeech: data[0].fl,\n                    pronunciation: data[0].hwi.prs[0].mw,\n                }, \n                () => {\n                    this.props.history.push(`/definition/${this.state.word}`);\n                }\n                );\n            }\n            else{\n                console.log('No Definition Found')\n            }\n        }\n        catch{\n            this.setState({error: 'No Definition Found'})\n        }\n        // console.log(this.state.info)\n        // console.log(this.state.word)\n    }\n \n\nrender (){\n    // if (!this.state.error && this.state.submitted && this.state.info.length > 0) {\n    // return <Redirect to={{ pathname: `/definition/${this.state.word}`, state: { word: this.state.word } }} />\n    // }\n    return (\n        <div>\n        <h1>My Dictionary</h1>\n        <Search search={this.search}/>\n        <div>\n             {this.state.error}\n        </div>\n        <div>\n             {this.state.word}\n        </div>\n        <div>\n             {this.state.partOfSpeech}\n        </div>\n        <div>\n             {this.state.versions.map((v, i) => <div key={i}>{v}</div>)}\n        </div>\n        <div>\n             {this.state.pronunciation}\n        </div>\n        <div>\n             {this.state.shortdef}\n        </div>\n        </div>\n    );\n    }\n}\n\n\n\n\n//     constructor(){ \n//         super();\n//           this.state = {\n//             word: '',\n//             error: '',\n//             info: [],\n//             partOfSpeech: [],\n//             versions: [],\n//             shortdef: \"\",\n//             pronunciation: \"\",\n//           };\n//         this.search = this.search.bind(this);\n//       }\n\n\n//     search = async ({word}) => {\n//         try{\n//             // var word = this.state.word.trim();\n//             const data = await MerriamAPI.getWordInfo(word);\n//             if (data){\n//                 this.props.handleUpdate({\n//                     word: word,\n//                     info: data,\n//                     versions: data[0].meta.stems,\n//                     shortdef: data[0].shortdef[0],\n//                     partOfSpeech: data[0].fl,\n//                     pronunciation: data[0].hwi.prs[0].mw,\n//                 }, \n//                 () => {\n//                     this.props.history.push(`/definition/${this.state.word}`);\n//                 }\n//                 );\n//             }\n//             else{\n//                 console.log('No Definition Found')\n//             }\n//         }\n//         catch{\n//             this.setState({error: 'No Definition Found'})\n//         }\n//         // console.log(this.state.info)\n//         // console.log(this.state.word)\n//     }\n \n\n// render (){\n//     // if (!this.state.error && this.state.submitted && this.state.info.length > 0) {\n//     // return <Redirect to={{ pathname: `/definition/${this.state.word}`, state: { word: this.state.word } }} />\n//     // }\n//     return (\n//         <div>\n//         <h1>My Dictionary</h1>\n//         <Search search={this.search}/>\n//         <div>\n//              {this.state.error}\n//         </div>\n//         <div>\n//              {this.state.word}\n//         </div>\n//         <div>\n//              {this.state.partOfSpeech}\n//         </div>\n//         <div>\n//              {this.state.versions.map((v, i) => <div key={i}>{v}</div>)}\n//         </div>\n//         <div>\n//              {this.state.pronunciation}\n//         </div>\n//         <div>\n//              {this.state.shortdef}\n//         </div>\n//         </div>\n//     );\n//     }\n// }\n\n\n\nexport default Home;"]},"metadata":{},"sourceType":"module"}