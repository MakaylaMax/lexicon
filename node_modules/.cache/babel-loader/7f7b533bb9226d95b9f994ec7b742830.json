{"ast":null,"code":"var _jsxFileName = \"/Users/makaylamaxwell/Documents/dev/Final/my-final-project/src/pages/GetWordContainer.js\";\nimport React, { Component } from 'react';\nimport Search from '../components/Search';\nimport MerriamAPI from '../services/MerriamAPI';\n\nclass GetWordContainer extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      word: this.props.word,\n      info: this.props.info,\n      partOfSpeech: this.props.parOfSpeech,\n      versions: this.props.versions,\n      shortdef: this.props.shortdef,\n      pronunciation: this.props.pronunciation\n    };\n  }\n\n  async componentDidMount() {\n    const word = this.props.match.params.word;\n\n    try {\n      const data = await MerriamAPI.getWordInfo(word);\n\n      if (data) {\n        this.setState({\n          word: word,\n          info: data,\n          versions: data[0].meta.stems,\n          shortdef: data[0].shortdef[0],\n          partOfSpeech: data[0].fl,\n          pronunciation: data[0].hwi.prs[0].mw\n        });\n      } else {\n        console.log(\"Error\");\n      }\n    } catch {\n      this.props.setModal('Offline');\n    }\n  }\n\n  async componentDidUpdate() {\n    const word = this.props.match.params.word;\n\n    if (word != this.state.word) {\n      try {\n        const data = await MerriamAPI.getWordInfo(word);\n\n        if (data) {\n          this.setState({\n            word: word,\n            info: data,\n            versions: data[0].meta.stems,\n            shortdef: data[0].shortdef[0],\n            partOfSpeech: data[0].fl,\n            pronunciation: data[0].hwi.prs[0].mw\n          });\n        } else {\n          console.log(\"Error\");\n        }\n      } catch {\n        this.props.setModal('Offline');\n      }\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Search, {\n      handleUpdate: this.props.handleUpdate,\n      setRedirect: this.props.setRedirect,\n      setModal: this.props.setModal,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }\n    }, this.state.word), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }\n    }, this.state.partOfSpeech), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }\n    }, this.state.versions.map((v, i) => /*#__PURE__*/React.createElement(\"div\", {\n      key: i,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 49\n      }\n    }, v))), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }\n    }, this.state.pronunciation), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }\n    }, this.state.shortdef)));\n  }\n\n}\n\nexport default GetWordContainer;","map":{"version":3,"sources":["/Users/makaylamaxwell/Documents/dev/Final/my-final-project/src/pages/GetWordContainer.js"],"names":["React","Component","Search","MerriamAPI","GetWordContainer","state","word","props","info","partOfSpeech","parOfSpeech","versions","shortdef","pronunciation","componentDidMount","match","params","data","getWordInfo","setState","meta","stems","fl","hwi","prs","mw","console","log","setModal","componentDidUpdate","render","handleUpdate","setRedirect","map","v","i"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport Search from '../components/Search';\nimport MerriamAPI from '../services/MerriamAPI';\n\nclass GetWordContainer extends Component {\n\nstate = {\n  word: this.props.word,\n  info: this.props.info,\n  partOfSpeech: this.props.parOfSpeech,\n  versions: this.props.versions,\n  shortdef: this.props.shortdef,\n  pronunciation: this.props.pronunciation,\n}\n\n\nasync componentDidMount() {\n  const word = this.props.match.params.word;\n  try{\n    const data = await MerriamAPI.getWordInfo(word);\n    if (data) {\n      this.setState({\n        word: word,\n        info: data,\n        versions: data[0].meta.stems,\n        shortdef: data[0].shortdef[0],\n        partOfSpeech: data[0].fl,\n        pronunciation: data[0].hwi.prs[0].mw, \n       })\n      }\n    else {\n      console.log(\"Error\")\n    }\n  }\n  catch {\n    this.props.setModal('Offline');\n  }\n}\n\n\nasync componentDidUpdate() {\n  const word = this.props.match.params.word;\n  if (word != this.state.word){\n    try{\n      const data = await MerriamAPI.getWordInfo(word);\n      if (data) {\n        this.setState({\n          word: word,\n          info: data,\n          versions: data[0].meta.stems,\n          shortdef: data[0].shortdef[0],\n          partOfSpeech: data[0].fl,\n          pronunciation: data[0].hwi.prs[0].mw, \n         })\n        }\n      else {\n        console.log(\"Error\")\n      }\n    }\n    catch {\n      this.props.setModal('Offline');\n    }\n    }\n  }\n\n\nrender (){\n\n  return (\n\n      <div >\n        <Search\n          handleUpdate={this.props.handleUpdate}\n          setRedirect={this.props.setRedirect}\n          setModal={this.props.setModal}\n        />\n        <div className=\"App\">\n        <div>\n             {this.state.word}\n        </div>\n        <div>\n             {this.state.partOfSpeech}\n        </div>\n        <div>\n             {this.state.versions.map((v, i) => <div key={i}>{v}</div>)}\n        </div>\n        <div>\n             {this.state.pronunciation}\n        </div>\n        <div>\n             {this.state.shortdef}\n        </div>\n        </div>\n      </div>\n  );\n  }\n}\n\n export default GetWordContainer;\n  \n\n"]},"metadata":{},"sourceType":"module"}