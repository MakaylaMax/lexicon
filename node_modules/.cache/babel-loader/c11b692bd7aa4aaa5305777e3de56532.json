{"ast":null,"code":"const apiKey = process.env.REACT_APP_MERRIAM_API_KEY;\nconst baseUrl = 'https://www.dictionaryapi.com/api/v3/references/collegiate/json'; // const collectionUrl = `${baseUrl}/jovial?key=${apiKey}`;\n// const index = () => {\n//     return fetch(collectionUrl)\n//         .then(response=>response.json());\n// }\n\nconst handleAPIErrors = response => {};\n\nfunction prepWord(word) {\n  return encodeURIComponent(word);\n}\n\nvar utils = {\n  prepWord: prepWord\n}; // function getQueryParams(params){\n//     params[\"api_key\"] = apiKey;\n//         var pairs = Object.keys(params).map(function(key){\n//             var result = key + \"=\" + params[key];\n//             return result;\n//         }) \n//         var urlParams = pairs.reduce(function(prev,next){\n//             return prev + \"&\" + next\n//         })  \n//     return urlParams\n// }\n\nfunction prepareUrl(word, params) {\n  var url = baseUrl + \"/\" + utils.prepWord(word) + \"?\" + apiKey;\n  return url;\n} //rewrite\n\n\nfunction callWord(word, params) {\n  var url = prepareUrl(word, params);\n  return fetch(url).then(response => response.json());\n}\n\nfunction getDefinitions(word) {\n  var params = {};\n  return callWord(word, params);\n}\n\nfunction getWordInfo(word) {\n  return fetch(getDefinitions(word)).then(response => response.json());\n} //this is the original assump\n// function getWordInfo(word){\n//     var meta = {}\n//     return fetch([getDefinitions(word)]).then(\n//         props.spread(function(definitions){\n//         meta.definitions = definitions;\n//         return meta\n//         })\n//     )\n// }\n//start\n// function callWord(word, params){\n//     var url = prepareUrl(word, params);\n//     return axios.get(url).then(function(response){\n//       return response.data\n//     })\n//   }\n// function getDefinitions(word){\n//     var params = {}\n//     return callWord(word, params)\n// }\n// function getWordInfo(word){\n//     var meta = {}\n//     return axios.all([getDefinitions(word)]).then(\n//         axios.spread(function(definitions){\n//         meta.definitions = definitions;\n//         return meta\n//         })\n//     )\n// }\n//end\n\n\nconst MerriamAPI = {\n  // index,\n  getDefinitions,\n  getWordInfo\n};\nexport default MerriamAPI;","map":{"version":3,"sources":["/Users/makaylamaxwell/Documents/dev/Final/my-final-project/src/services/MerriamAPI.js"],"names":["apiKey","process","env","REACT_APP_MERRIAM_API_KEY","baseUrl","handleAPIErrors","response","prepWord","word","encodeURIComponent","utils","prepareUrl","params","url","callWord","fetch","then","json","getDefinitions","getWordInfo","MerriamAPI"],"mappings":"AAAA,MAAMA,MAAM,GAAGC,OAAO,CAACC,GAAR,CAAYC,yBAA3B;AACA,MAAMC,OAAO,GAAG,iEAAhB,C,CACA;AAEA;AACA;AACA;AACA;;AAEA,MAAMC,eAAe,GAAGC,QAAQ,IAAI,CAEnC,CAFD;;AAIA,SAASC,QAAT,CAAkBC,IAAlB,EAAuB;AACnB,SAAOC,kBAAkB,CAACD,IAAD,CAAzB;AACD;;AAEH,IAAIE,KAAK,GAAG;AACRH,EAAAA,QAAQ,EAAEA;AADF,CAAZ,C,CAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASI,UAAT,CAAoBH,IAApB,EAA0BI,MAA1B,EAAiC;AAC7B,MAAIC,GAAG,GAAGT,OAAO,GAAG,GAAV,GAAgBM,KAAK,CAACH,QAAN,CAAeC,IAAf,CAAhB,GAAuC,GAAvC,GAA6CR,MAAvD;AACA,SAAOa,GAAP;AACH,C,CAED;;;AACA,SAASC,QAAT,CAAkBN,IAAlB,EAAwBI,MAAxB,EAA+B;AAC3B,MAAIC,GAAG,GAAGF,UAAU,CAACH,IAAD,EAAOI,MAAP,CAApB;AACA,SAAOG,KAAK,CAACF,GAAD,CAAL,CAAWG,IAAX,CAAgBV,QAAQ,IAAIA,QAAQ,CAACW,IAAT,EAA5B,CAAP;AACH;;AAED,SAASC,cAAT,CAAwBV,IAAxB,EAA6B;AACzB,MAAII,MAAM,GAAG,EAAb;AACA,SAAOE,QAAQ,CAACN,IAAD,EAAOI,MAAP,CAAf;AACH;;AAED,SAASO,WAAT,CAAqBX,IAArB,EAA0B;AACtB,SAAOO,KAAK,CAACG,cAAc,CAACV,IAAD,CAAf,CAAL,CAA4BQ,IAA5B,CAAiCV,QAAQ,IAAIA,QAAQ,CAACW,IAAT,EAA7C,CAAP;AACH,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,MAAMG,UAAU,GAAG;AACf;AACAF,EAAAA,cAFe;AAGfC,EAAAA;AAHe,CAAnB;AAOA,eAAeC,UAAf","sourcesContent":["const apiKey = process.env.REACT_APP_MERRIAM_API_KEY;\nconst baseUrl = 'https://www.dictionaryapi.com/api/v3/references/collegiate/json';\n// const collectionUrl = `${baseUrl}/jovial?key=${apiKey}`;\n\n// const index = () => {\n//     return fetch(collectionUrl)\n//         .then(response=>response.json());\n// }\n\nconst handleAPIErrors = response => {\n\n}\n\nfunction prepWord(word){\n    return encodeURIComponent(word)\n  }\n  \nvar utils = {\n    prepWord: prepWord,\n}\n\n// function getQueryParams(params){\n//     params[\"api_key\"] = apiKey;\n//         var pairs = Object.keys(params).map(function(key){\n//             var result = key + \"=\" + params[key];\n//             return result;\n//         }) \n//         var urlParams = pairs.reduce(function(prev,next){\n//             return prev + \"&\" + next\n//         })  \n//     return urlParams\n// }\n\nfunction prepareUrl(word, params){\n    var url = baseUrl + \"/\" + utils.prepWord(word) + \"?\" + apiKey;\n    return url\n}\n\n//rewrite\nfunction callWord(word, params){\n    var url = prepareUrl(word, params);\n    return fetch(url).then(response => response.json());\n}\n\nfunction getDefinitions(word){\n    var params = {}\n    return callWord(word, params)\n}\n\nfunction getWordInfo(word){\n    return fetch(getDefinitions(word)).then(response => response.json());\n}\n\n//this is the original assump\n// function getWordInfo(word){\n//     var meta = {}\n//     return fetch([getDefinitions(word)]).then(\n//         props.spread(function(definitions){\n//         meta.definitions = definitions;\n//         return meta\n//         })\n//     )\n// }\n\n//start\n// function callWord(word, params){\n//     var url = prepareUrl(word, params);\n//     return axios.get(url).then(function(response){\n//       return response.data\n//     })\n//   }\n  \n// function getDefinitions(word){\n//     var params = {}\n//     return callWord(word, params)\n// }\n\n// function getWordInfo(word){\n//     var meta = {}\n//     return axios.all([getDefinitions(word)]).then(\n//         axios.spread(function(definitions){\n//         meta.definitions = definitions;\n//         return meta\n//         })\n//     )\n// }\n//end\n\nconst MerriamAPI = {\n    // index,\n    getDefinitions,\n    getWordInfo\n}\n\n\nexport default MerriamAPI;"]},"metadata":{},"sourceType":"module"}