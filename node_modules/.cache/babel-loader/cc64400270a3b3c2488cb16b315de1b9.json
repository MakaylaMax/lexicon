{"ast":null,"code":"var _jsxFileName = \"/Users/makaylamaxwell/Documents/dev/Final/my-final-project/src/pages/GetWordContainer.js\";\nimport React, { Component } from 'react';\nimport Search from '../components/Search';\nimport MerriamAPI from '../services/MerriamAPI';\nimport '../App.css';\n\nclass GetWordContainer extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      word: this.props.word,\n      info: this.props.info,\n      partOfSpeech: this.props.parOfSpeech,\n      versions: this.props.versions,\n      shortdef: this.props.shortdef,\n      pronunciation: this.props.pronunciation,\n      state: this.props.errors\n    };\n  }\n\n  async componentDidMount() {\n    const word = this.props.match.params.word;\n\n    try {\n      const data = await MerriamAPI.getWordInfo(word);\n\n      if (data) {\n        this.setState({\n          word: word,\n          info: data,\n          versions: data[0].meta.stems,\n          shortdef: data[0].shortdef[0],\n          partOfSpeech: data[0].fl,\n          pronunciation: data[0].hwi.prs[0].mw\n        });\n      } else {\n        console.log(\"Error\");\n      }\n    } catch {\n      this.props.setModal('Offline');\n    }\n  }\n\n  async componentDidUpdate() {\n    const word = this.props.match.params.word;\n\n    if (word != this.state.word) {\n      try {\n        const data = await MerriamAPI.getWordInfo(word);\n\n        if (data) {\n          this.setState({\n            word: word,\n            info: data,\n            versions: data[0].meta.stems,\n            shortdef: data[0].shortdef[0],\n            partOfSpeech: data[0].fl,\n            pronunciation: data[0].hwi.prs[0].mw\n          });\n        } else {\n          console.log(\"Error\");\n        }\n      } catch {\n        this.props.setModal('Offline');\n      }\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"searchWordPage\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Search, {\n      handleUpdate: this.props.handleUpdate,\n      setRedirect: this.props.setRedirect,\n      setModal: this.props.setModal,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      className: \"display-6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }\n    }, \"Definition\"), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 14\n      }\n    }, \"word:\"), \" \", this.state.word), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 15\n      }\n    }, \"part of speech:\"), \" \", this.state.partOfSpeech), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 14\n      }\n    }, \"versions:\"), \"  \", this.state.versions.map((v, i) => /*#__PURE__*/React.createElement(\"div\", {\n      key: i,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 67\n      }\n    }, v))), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 13\n      }\n    }, \"pronunciation:\"), \" \", this.state.pronunciation), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 13\n      }\n    }, \"definition:\"), \"  \", this.state.shortdef)));\n  }\n\n}\n\nexport default GetWordContainer;","map":{"version":3,"sources":["/Users/makaylamaxwell/Documents/dev/Final/my-final-project/src/pages/GetWordContainer.js"],"names":["React","Component","Search","MerriamAPI","GetWordContainer","state","word","props","info","partOfSpeech","parOfSpeech","versions","shortdef","pronunciation","errors","componentDidMount","match","params","data","getWordInfo","setState","meta","stems","fl","hwi","prs","mw","console","log","setModal","componentDidUpdate","render","handleUpdate","setRedirect","map","v","i"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport Search from '../components/Search';\nimport MerriamAPI from '../services/MerriamAPI';\nimport '../App.css';\n\nclass GetWordContainer extends Component {\n\nstate = {\n  word: this.props.word,\n  info: this.props.info,\n  partOfSpeech: this.props.parOfSpeech,\n  versions: this.props.versions,\n  shortdef: this.props.shortdef,\n  pronunciation: this.props.pronunciation,\n  state: this.props.errors,\n}\n\n\nasync componentDidMount() {\n  const word = this.props.match.params.word;\n  try{\n    const data = await MerriamAPI.getWordInfo(word);\n    if (data) {\n      this.setState({\n        word: word,\n        info: data,\n        versions: data[0].meta.stems,\n        shortdef: data[0].shortdef[0],\n        partOfSpeech: data[0].fl,\n        pronunciation: data[0].hwi.prs[0].mw, \n       })\n      }\n    else {\n      console.log(\"Error\")\n    }\n  }\n  catch {\n    this.props.setModal('Offline');\n  }\n}\n\n\nasync componentDidUpdate() {\n  const word = this.props.match.params.word;\n  if (word != this.state.word){\n    try{\n      const data = await MerriamAPI.getWordInfo(word);\n      if (data) {\n        this.setState({\n          word: word,\n          info: data,\n          versions: data[0].meta.stems,\n          shortdef: data[0].shortdef[0],\n          partOfSpeech: data[0].fl,\n          pronunciation: data[0].hwi.prs[0].mw, \n         })\n        }\n      else {\n        console.log(\"Error\")\n      }\n    }\n    catch {\n      this.props.setModal('Offline');\n    }\n    }\n  }\n\n\nrender (){\n\n  return (\n\n      <div >\n        <div className=\"searchWordPage\">\n        <Search\n          handleUpdate={this.props.handleUpdate}\n          setRedirect={this.props.setRedirect}\n          setModal={this.props.setModal}\n        />\n        </div>\n        <div className=\"App\">\n        <h1 className=\"display-6\">\n          Definition\n        </h1>\n        <div>\n             <b>word:</b> {this.state.word}\n        </div>\n        <div>\n              <b>part of speech:</b> {this.state.partOfSpeech}\n        </div>\n        <div>\n             <b>versions:</b>  {this.state.versions.map((v, i) => <div key={i}>{v}</div>)}\n        </div>\n        <div>\n            <b>pronunciation:</b> {this.state.pronunciation}\n        </div>\n        <div>\n            <b>definition:</b>  {this.state.shortdef}\n        </div>\n        </div>\n      </div>\n  );\n  }\n}\n\n export default GetWordContainer;\n  \n\n"]},"metadata":{},"sourceType":"module"}