{"ast":null,"code":"var _jsxFileName = \"/Users/makaylamaxwell/Documents/dev/Final/my-final-project/src/App.js\";\nimport React, { Component } from 'react';\nimport { Switch, Route, Link } from 'react-router-dom';\nimport Redirector from './components/Redirector';\nimport GetWordContainer from './pages/GetWordContainer';\nimport Home from './pages/Home';\nimport Saved from './pages/Saved';\nimport NotFound from './pages/NotFound';\nimport InternalServerError from './pages/InternalServerError';\nimport Offline from './modals/Offline';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      redirect: {},\n      word: '',\n      info: [],\n      partOfSpeech: [],\n      versions: [],\n      shortdef: \"\",\n      pronunciation: \"\",\n      modal: false,\n      faves: []\n    };\n\n    this.setRedirect = redirect => {\n      {\n        this.setState({\n          redirect\n        });\n      }\n      console.log(`word state on redirect: ${this.state.word}`);\n      this.test();\n    };\n\n    this.handleUpdate = values => this.setState({ ...values\n    });\n\n    this.setModal = modal => this.setState({\n      modal\n    });\n\n    this.handleSave = word => {\n      this.setState(prevState => {\n        const faves = [...prevState.faves];\n        const savedIndex = faves.indexOf(word);\n\n        if (savedIndex >= 0) {\n          console.log(`Removing ${word.word} from faves...`);\n          faves.splice(savedIndex, 1); // Remove one word from savedIndex\n        } else {\n          console.log(`Adding ${word.word} to faves...`);\n          faves.push(word);\n        }\n\n        return {\n          faves\n        };\n      });\n      console.log(this.state.faves);\n      console.log(`These are faves: ${this.state.faves.word}`);\n      console.log(`word state: ${this.state.word}`);\n      this.test();\n    };\n\n    this.test = () => {\n      const searchedword = this.state.word;\n\n      if (this.state.faves.word = searchedword) {\n        console.log(`TRUE`);\n      } else {\n        console.log(`FAIL`);\n      }\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, this.state.modal === 'offline' ? /*#__PURE__*/React.createElement(Offline, {\n      closeModal: () => this.setModal(false),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 44\n      }\n    }) : '', /*#__PURE__*/React.createElement(Route, {\n      render: routeProps => /*#__PURE__*/React.createElement(Redirector, Object.assign({\n        redirect: this.state.redirect,\n        setRedirect: this.setRedirect\n      }, routeProps, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 34\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"header\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"nav\", {\n      className: \"navbar navbar-expand-sm navbar-dark bg-info\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Link, {\n      className: \"navbar-brand\",\n      to: \"/\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 13\n      }\n    }, \"The Lexicon\"), /*#__PURE__*/React.createElement(Link, {\n      className: \"navbar-brand\",\n      to: \"/savedwords\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 13\n      }\n    }, \"Saved\"))), /*#__PURE__*/React.createElement(\"main\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Route, {\n      render: routeProps => {\n        var _routeProps$location$;\n\n        return !((_routeProps$location$ = routeProps.location.state) === null || _routeProps$location$ === void 0 ? void 0 : _routeProps$location$.alert) ? '' : /*#__PURE__*/React.createElement(\"div\", {\n          className: \"alert alert-primary position-relative float-right m-3\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 15\n          }\n        }, routeProps.location.state.alert);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Switch, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Route, {\n      exact: true,\n      path: \"/\",\n      render: routeProps => /*#__PURE__*/React.createElement(Home, Object.assign({\n        setRedirect: this.setRedirect,\n        handleUpdate: this.handleUpdate,\n        setModal: this.setModal\n      }, routeProps, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 15\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      exact: true,\n      path: \"/definition/:word\",\n      render: routeProps => /*#__PURE__*/React.createElement(GetWordContainer, Object.assign({\n        setRedirect: this.setRedirect,\n        handleUpdate: this.handleUpdate,\n        word: this.state.word,\n        partOfSpeech: this.state.partOfSpeech,\n        versions: this.state.versions,\n        shortdef: this.state.shortdef,\n        pronunciation: this.state.pronunciation,\n        setModal: this.setModal,\n        faves: this.state.faves,\n        handleSave: this.handleSave\n      }, routeProps, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 15\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      exact: true,\n      path: \"/savedwords\",\n      render: routeProps => /*#__PURE__*/React.createElement(Saved, Object.assign({\n        faves: this.state.faves,\n        word: this.state.word,\n        handleSave: this.handleSave\n      }, routeProps, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 15\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"/404\",\n      component: NotFound,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"/500\",\n      component: InternalServerError,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      component: NotFound,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 13\n      }\n    }))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/makaylamaxwell/Documents/dev/Final/my-final-project/src/App.js"],"names":["React","Component","Switch","Route","Link","Redirector","GetWordContainer","Home","Saved","NotFound","InternalServerError","Offline","App","state","redirect","word","info","partOfSpeech","versions","shortdef","pronunciation","modal","faves","setRedirect","setState","console","log","test","handleUpdate","values","setModal","handleSave","prevState","savedIndex","indexOf","splice","push","searchedword","render","routeProps","location","alert"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport {Switch, Route, Link} from 'react-router-dom';\nimport Redirector from './components/Redirector';\nimport GetWordContainer from './pages/GetWordContainer';\nimport Home from './pages/Home';\nimport Saved from './pages/Saved';\nimport NotFound from './pages/NotFound';\nimport InternalServerError from './pages/InternalServerError';\nimport Offline from './modals/Offline';\n\nclass App extends Component {\n\n  state = {\n    redirect: {},\n    word: '',\n    info: [],\n    partOfSpeech: [],\n    versions: [],\n    shortdef: \"\",\n    pronunciation: \"\",\n    modal: false,\n    faves: [],\n  }\n\n  setRedirect = redirect =>{{\n    this.setState({redirect})\n  }\n  console.log(`word state on redirect: ${this.state.word}`);\n  this.test();\n}\n  \n  handleUpdate = values => \n    this.setState({...values})\n    \n\n  setModal = modal =>\n    this.setState({modal})\n\n  \n\n  handleSave = (word) => {\n    this.setState( prevState => {\n      const faves = [...prevState.faves];\n      const savedIndex = faves.indexOf(word);\n\n     if (savedIndex >= 0) {\n        console.log(`Removing ${word.word} from faves...`);\n        faves.splice(savedIndex, 1); // Remove one word from savedIndex\n      } else {\n        console.log(`Adding ${word.word} to faves...`);\n        faves.push(word);\n      }\n      return {faves};\n    });\n    console.log(this.state.faves);\n    console.log(`These are faves: ${this.state.faves.word}`);\n    console.log(`word state: ${this.state.word}`);\n    this.test();\n  }\n\n  test = () => {\n    const searchedword = this.state.word;\n     if (this.state.faves.word=(searchedword)) {\n        console.log(`TRUE`);\n      } else {\n        console.log(`FAIL`);\n      }\n    };\n  \n\n\nrender() {\n    return (\n      <>\n        { this.state.modal === 'offline' ? <Offline closeModal={() => this.setModal(false)} /> : ''}\n\n        <Route \n          render={ routeProps => <Redirector redirect={this.state.redirect} setRedirect={this.setRedirect} {...routeProps} />}\n        />\n        <header>\n          <nav className=\"navbar navbar-expand-sm navbar-dark bg-info\">\n            <Link className=\"navbar-brand\" to='/'>The Lexicon</Link>\n            <Link className=\"navbar-brand\" to='/savedwords'>Saved</Link>\n          </nav>\n        </header>\n\n        <main>\n        <Route\n            render = { routeProps =>\n              !routeProps.location.state?.alert ? '' :\n              <div className=\"alert alert-primary position-relative float-right m-3\">\n                { routeProps.location.state.alert }\n              </div>\n            }\n          />\n          <Switch>\n            <Route exact path=\"/\" render={ routeProps => \n              <Home \n                setRedirect={this.setRedirect} \n                handleUpdate={this.handleUpdate} \n                setModal={this.setModal}\n                {...routeProps} />} \n              />\n            <Route exact path=\"/definition/:word\" render={routeProps => \n              <GetWordContainer \n                setRedirect={this.setRedirect}\n                handleUpdate={this.handleUpdate}\n                word={this.state.word} \n                partOfSpeech={this.state.partOfSpeech}\n                versions={this.state.versions}\n                shortdef={this.state.shortdef}\n                pronunciation={this.state.pronunciation}\n                setModal={this.setModal}\n                faves={this.state.faves}\n                handleSave={this.handleSave}  \n                {...routeProps} />} \n              />\n            <Route exact path=\"/savedwords\" render={routeProps =>\n              <Saved \n                faves={this.state.faves}\n                word={this.state.word} \n                handleSave={this.handleSave} \n                {...routeProps} />}\n            />\n            <Route path=\"/404\" component={NotFound} />\n            <Route path=\"/500\" component={InternalServerError} />\n            <Route component={NotFound} />\n          </Switch>\n        </main>\n      </>\n    );\n  }\n}\n\nexport default App;\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}